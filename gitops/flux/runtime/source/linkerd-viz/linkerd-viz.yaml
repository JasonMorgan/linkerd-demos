---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQVBCSEdVYVZSR01RcHl1SUZ1YThkL013RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMk1ETXhPREkzTVRkYQpGdzB5TWpBMk1ETXhPREkzTVRkYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNvanNpR0ZCRnNOaU5nRE1ueVdtS1UKVnhmZ1VQV21zcndlSnRtemtyY3FTVWt3dDJJTFZjNWFPVFRpUkhPbXg4djhWaUxSM1hydndMVkV2MStsM2gwWgpxOHBmMWo1eHg0TnphbUxzdmlhdExHV29xRStYbVNQeEZWUEZmR3p4WEdmQmNibmVKM20zUjR1RTAva3R3MjRtCnoxNUFSREN4WTB5UXphR1diMHI1OEl6d3N0OU4zWld3ZFJsOXZpUEJEaXhkQVFyc005NjkwS3FmU2JyYjJGODYKVVVrRUlKcDVpT1FhZ0dTTjFsTUhuWkZjQkNJcnd2TkxkV0ErVklZOHJwcis3WTZIYUY3MzdrUTZzc3c5OWhlNApNeW9FU2dYZXlWbWR6RmtWSk55Tkw2WGtpamE1d3UwV2E1ZVJsaFd2T1FBcC84RDFVdm9sakwvdEZqZGVkMGFWCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ25yQUFpdWxONlh5TmloM0FSUU4rZ1NmOHE1TGsrClpQc3VoM04vT0JWRytueHJzN250bEVxbCtLNHdrTG5iL2RyMVhIc01TMk5mUVQ2akpYVWNoYnpybm9BRkRXUXgKUXl3Q0MzcnlzdjNBSHNoMmtkR1Uxc2c4VlRsaitXakkzRFpDZXlQTmhCSWk4R1JMbXZRYkNvMDZEN3lKbmIrNApxZ1V6ZFdVWjNyaXBXWk0zMGpWcXowNFVVVU52ZXpvN05wTTZQRU1GV1I5WDFjM3NoZGRzZEpPNjNBOUZiVGJvCnRtemlsV3dWUkNNZFNNOVJVcHlCaDZ5RzhPVnZqNnliMitWWWFqUEdxZE1Sd3o1TlR0K1NObU90aDFaMzVnUUMKNTBCYWFlQUROQWFUTUNkK3RPRk5qcVUzdkZ6TlF6d3o1Q21zMmNmSzRnWVNneGp4ZzBZaFgrMVgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcUk3SWhoUVJiRFlqWUF6SjhscGlsRmNYNEZEMXBySzhIaWJaczVLM0trbEpNTGRpCkMxWE9XamswNGtSenBzZkwvRllpMGQxNjc4QzFSTDlmcGQ0ZEdhdktYOVkrY2NlRGMycGk3TDRtclN4bHFLaFAKbDVrajhSVlR4WHhzOFZ4bndYRzUzaWQ1dDBlTGhOUDVMY051SnM5ZVFFUXdzV05Na00yaGxtOUsrZkNNOExMZgpUZDJWc0hVWmZiNGp3UTRzWFFFSzdEUGV2ZENxbjBtNjI5aGZPbEZKQkNDYWVZamtHb0JramRaVEI1MlJYQVFpCks4THpTM1ZnUGxTR1BLNmEvdTJPaDJoZTkrNUVPckxNUGZZWHVETXFCRW9GM3NsWm5jeFpGU1RjalMrbDVJbzIKdWNMdEZtdVhrWllWcnprQUtmL0E5Vkw2Sll5LzdSWTNYbmRHbFFJREFRQUJBb0lCQVFDSCswQ3NZaTQ0RldqdQppUUsyZ05KOGg5S2NSZFFYMnFQRzAyTFg2dW5YdEczV1htczdaOHJrb0xnWVBrN3E0czZlME1LZ2VrUStmVUgvCnAwQTdxUGZqQ09Objg0aEc5RVVJN0cvSVBCTXBxK0tMY05WZElNK05JNzZFV0wvdTY3Uk1yRG5kamcwMG5nUmgKY1R6Wi9ZcTB4cUJyeWxkYUZCamx6TzZxVlRpd2IxOGZVOVRkTUJYQ0tzT2RyV2xvVWk5cHlOaXA4VUZsY0RSWgp5alk1OXhiRFJ3b25SQ3pOWDhWRTZ2aWY2NWUyT2NiWHp0RVZZakpUaXFkOWRORkRjaE41QXh2VlVPN3FUM1hsCmN3eUIxMk9zOG41SVY2V0IyUDZTMFZ4ME1QV2hKcmQwWXZodG44QURqcWdGSVUwdHR2ZDhWTXZXblBaeUx5Zi8KcHcraGxxZ2hBb0dCQU52ZC9WU2UxTU1IYUpnNHBobllhR0tnbGsvZHVaZ2cvQlkvTGtvbkxtTm91SWJUdFVmTApHWm00dmM3M1htSVFKMVROUXZJalYyVXlFeGNlK2E2azZHd2pwZkZvZDlUdkRNMjJIa2xsdFlPTEpHZ1p4WjQ0CkcwazZ1bk5BcGJSVG9rSlZrMFhXK2dvSUovTmoxZU9tcUEzYmtJVzhNSmJhYUlsNEpOYVVSSFZOQW9HQkFNUkMKS1NTWE1wckRiT1pvSzBWSEN6cUtKRFhEUy9TejBtK0VzZnlnMHl6M3hGYk5aM1F6SUZIWEM4clhIMUlHWDI0Mgp6b0lvR1kyRTlvY0FtMWtwcmpoeXRhd3RaaHhqRXo5RVBZQkU4MEo1eXR5NkZWSXdaeEdtMHUrdmhyZGdrblNjCmcrYkNLSndUWTMweE1scHBIVXpDQXRRU2w5cVc0RzhUTHVKaDB0SnBBb0dBSkYrVE8xNlRZRGhuaTFkRDAxN0QKMWgwdkFNTnpvc0ZDTXdQOHluTzA3dWt5TGN2MFg0NHdEQWhPRG1GS0Vmc09KcTlXZGV4MjF0enozNDFXVFJnbgpBMHphZFJlTlM0TElvWGVSaHg3MmFtNm9kVGhlUXhDUkl3bytNamJ0c3VsckhJSS92UHdWblhjLzlMbjlkbzNwCm0zRkpkWFp1cTJZeWlSdUJMS2FXdExrQ2dZQWJEQ012YjhjQm5UMDg0ODVTMWQrdVNhdUQzVTV5Z3ZYVmVLd3UKN05zdHIxZlh2cWNyVklCM3h2TlJHU1N2NFVEMXA0ZitXQmh0Y0kycFBXUXJmWnNOSElIOUlLU1o5TzJLSXBWMwpRQWxtZC9LRlNQLzNPOFI0b2swZnkwajlyTW1DV0srMDliMHpCVmtJditiNG50UHk2Q29Mb0NSZGM3MnFrVEk4CjhNNWxRUUtCZ1FDakRtbFg4OHA1L0RuRWJhY2hBOXYrOThMZkM4MHFndVFuaW1Gc1RhL2hla2NCU3JCQ3IxcW8KT2FlZ3Jja2taVkZPSXpqK2VFeFptc1JMc3hMeTNkWjZXR3dCcUkrc2NQTWZ5QkRxelY0U2JYSE5LVWlOZitKYwoybWRqdGk2SlB6UDJXRERzRUtIdlpQTXpMU2ZJcU5pbVFCRWU1YVBsUGVDRTg5QlhYVEljREE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQVBCSEdVYVZSR01RcHl1SUZ1YThkL013RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMk1ETXhPREkzTVRkYQpGdzB5TWpBMk1ETXhPREkzTVRkYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNvanNpR0ZCRnNOaU5nRE1ueVdtS1UKVnhmZ1VQV21zcndlSnRtemtyY3FTVWt3dDJJTFZjNWFPVFRpUkhPbXg4djhWaUxSM1hydndMVkV2MStsM2gwWgpxOHBmMWo1eHg0TnphbUxzdmlhdExHV29xRStYbVNQeEZWUEZmR3p4WEdmQmNibmVKM20zUjR1RTAva3R3MjRtCnoxNUFSREN4WTB5UXphR1diMHI1OEl6d3N0OU4zWld3ZFJsOXZpUEJEaXhkQVFyc005NjkwS3FmU2JyYjJGODYKVVVrRUlKcDVpT1FhZ0dTTjFsTUhuWkZjQkNJcnd2TkxkV0ErVklZOHJwcis3WTZIYUY3MzdrUTZzc3c5OWhlNApNeW9FU2dYZXlWbWR6RmtWSk55Tkw2WGtpamE1d3UwV2E1ZVJsaFd2T1FBcC84RDFVdm9sakwvdEZqZGVkMGFWCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ25yQUFpdWxONlh5TmloM0FSUU4rZ1NmOHE1TGsrClpQc3VoM04vT0JWRytueHJzN250bEVxbCtLNHdrTG5iL2RyMVhIc01TMk5mUVQ2akpYVWNoYnpybm9BRkRXUXgKUXl3Q0MzcnlzdjNBSHNoMmtkR1Uxc2c4VlRsaitXakkzRFpDZXlQTmhCSWk4R1JMbXZRYkNvMDZEN3lKbmIrNApxZ1V6ZFdVWjNyaXBXWk0zMGpWcXowNFVVVU52ZXpvN05wTTZQRU1GV1I5WDFjM3NoZGRzZEpPNjNBOUZiVGJvCnRtemlsV3dWUkNNZFNNOVJVcHlCaDZ5RzhPVnZqNnliMitWWWFqUEdxZE1Sd3o1TlR0K1NObU90aDFaMzVnUUMKNTBCYWFlQUROQWFUTUNkK3RPRk5qcVUzdkZ6TlF6d3o1Q21zMmNmSzRnWVNneGp4ZzBZaFgrMVgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: dd026ee78a73fcef72ff79bae97ca91b1c1d043e3c4209a2a6cc90d871fb6063
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUp4Z1Y3WlZEakI5RldZc3lLNlB2cW93RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMgpNRE14T0RJM01UaGFGdzB5TWpBMk1ETXhPREkzTVRoYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEZW1SMDR3UEd4TDFmdDhvVnBoRWxsT254ZEUwcWJ6amJaTG1rWkZudjJwWExTOEh4cTBhYis1NHFseG43ZQoxd2FwU3czbjZCcUJPRmR2Y1JaZkpGeVRINUpXdGJxZXJvV2owSUovMGdKRm4rclpTL1drRnBpRWdxUzdaTVhtClE1Nm5FV2pqazRaSkJ4QXRYbm02UGZhMzRkeGZYZTlVdVJTUFRIK3k3SGJCb3hnS3dtWFJlVmg0djhYRjBzaUwKTWplWGVtdmlGT2h3OG4reXB3TUtQbHpKbTI1cXdSKzEvb2R6VWVoUldVcFQzcnFESzg1a3pZQ1dRYXREYTU5KwpFS0hTbUFZOFhPeHRaMzFmQjNIRVFPNXRJN1RsOE9nN0RsOEhPRlBtMmNrY1VFWVJuMU12czRJSHZ2YUNuOGpSCmNkN1RacEE4ODV1a1M1L3JSdTFqNHJpVkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUF1eGVNNHl1bTBheFZGZWw4SUtvRVNrbkFMUjB5eUpRZWcxSS9VSGNlK0c2ZkF5THAyM1RpTWtkR2oKNklIZ1VjSDlqYlJ6YVRLU0diT29ESTBYa1F5aVcyZXlnbEw4SDZkMGU4bXlKTjJFUlV5MlczaU1HcW80TGF4bwp1MXNqdmNWSWZNT1pSbkF1dVNrbWhFTksrbU5ORmhqZ0xpWHZ6KzZQY0djS0p1OXhGK2d6amJIMnVBRU4vN2dDCk1XbmJJMHY5T05QSk94TUpXaWhuV0xhTnBlYzhQZ1k2TkJhWnJMZ3JJMTBYbmdrUmRtOEM0SFZRQ0E2TjlVREQKZDM4NkhjVG4zT3kvN2tpaHpvRzRlUW5UZTROY00xV3ZrWTY2bzI1QUM3Mk14emZCWkVwSGhIUy9YRzdkSVVCZwpjbGw2OHNUVVBVL3BKeEg0SG9ZeDBCZ0VUZGJ4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM3BrZE9NRHhzUzlYN2ZLRmFZUkpaVHA4WFJOS204NDIyUzVwR1JaNzlxVnkwdkI4CmF0R20vdWVLcGNaKzN0Y0dxVXNONStnYWdUaFhiM0VXWHlSY2t4K1NWclc2bnE2Rm85Q0NmOUlDUlovcTJVdjEKcEJhWWhJS2t1MlRGNWtPZXB4Rm80NU9HU1FjUUxWNTV1ajMydCtIY1gxM3ZWTGtVajB4L3N1eDJ3YU1ZQ3NKbAowWGxZZUwvRnhkTElpekkzbDNwcjRoVG9jUEovc3FjRENqNWN5WnR1YXNFZnRmNkhjMUhvVVZsS1U5NjZneXZPClpNMkFsa0dyUTJ1ZmZoQ2gwcGdHUEZ6c2JXZDlYd2R4eEVEdWJTTzA1ZkRvT3c1ZkJ6aFQ1dG5KSEZCR0VaOVQKTDdPQ0I3NzJncC9JMFhIZTAyYVFQUE9icEV1ZjYwYnRZK0s0bFFJREFRQUJBb0lCQUFQVXp0UHpQalcyZ3VUdApqNjVKUUpvbGI0Nktqbll3RG5HZWd1Q1RxbjZNU25XbS9mMDRybzhrblJaTlhGR3BrY3ZJSnUwZTZaWGZ5bUY0CnFOSHFaazJCOVpyWWRlWFZTeWVPcHpCY0JQMzl5cVVDMGErSlZBYXoyUElBd2djOGtyWjliamk4aVVzb2UvYkwKOFh4ckpKdjFuejFrK0lHVXplM0plMGt4R0xvc2REd1ZPU0dXRFNKMHA5UG9YS2tvdWNtTW5JdjhUejNJaGZLMQoydXB2SmFqYVpQOGo2RmxQTXBma3JzVktDSjBJc2NUM1htdmpHY0JSQ1RhT3lBOSsxRkhRSlhlUHlYMk5KNXZGCkRMZnM2OWUrRmc3MnB5Q014Y0Z2aklWcGdwOG9qWEkwRmZmQ0txUml6V3JvWDdveGFXUDdXMlRlV0dqRHRqMVMKYmxhb0V3RUNnWUVBNVVNdnN3THJ0TnpicGlCZUw5R2VGWnlyVm9pS21xNnVzM0U3OGl1ZzJCYWxKSGdiOWF2Kwp4bHNIT0w2Zmk5L1VQNU9TZEE0RlJyUndmWGFEdGpUdkYzT0FyaDhMdDBHWXB5Z2tNUDdjZWJUZXNBeHlvWFdnCkQrVHAzRzJlVUFZQ2dWME9VQUxONXFwMFZVQjlNR1NFRVNsaUxadFlqeVNHemVkSDFRYlJ6NmtDZ1lFQStJNzEKWDQ4eFZXeEhkcXJiOVBtM3hxN3F2K0dFSCtUUWtXd2hLamp0WWpQYml2WVNOMkZBT3ZKVUVTc052TmxxK284ZApINEF5RVNuUEJDSTlqdVdHV1RSUm0xdXJ2OExQZXpsMk5MK1N6bkVGK005WWxRWG9WczJWdlNmNkdvWW1tSUZoCnhKS0tTQ3pacHptTzd2M3JMS3JCV1lDSHNldkZDK0ZaQzJoUjVRMENnWUVBbUZjWXJ2N1YyUXlZOTc2eVYxd1cKaTQzYlhGakdvUnBLQS9yT05wRS9BOWVvVEo5ekZNQUJQNVRsSzVPZk9MYTJ0cmc4ck5sVU1ETmVQRUF3TFRibgpXTkhyUThobFpKUTE5M3o0NzRXcXcwU29aSnNnNEtEa2h5czVLcnU4WXJoYm1kSlgzRnJBcnZHODg1a3lscUYwCkVHTkxWYnJRRWUzWGxhS0ZYTXgzUm1FQ2dZRUF3MmlJcWJiR2Z6VGdQZi8zYXZIRHRGU2h3M2FGVEJtMGl3OXEKUjJwMzNjT05Md05qc053cEJlNnJmcy9OUGhIajA5WWRmRDFwbnlxeVVMcW1rS2dMNWllR25OQUdCMzBkWnUvMgo2V05QQkRQQkVTblpwMWI4b1BtQlpqTitvY21qb0RQZmJBNFUzc2M3MmdjYlF2S25KL2VhaUVYTzZHYkdCQ0FHCnhEd2dYaVVDZ1lCT3A2ZzVYQnJNbXBOUVZEclJ0OHVqclpKaHRzd0pVTWtybXdmcWNiUDQwUmFMeFlIVEVheTQKa3lmTW5QQWpDVzZ4MkliaHJkUzVjR3NXb2wyNjlEb1RQWHdkMytxc2ZFVnNaVjdwL1VrNG1RSUIxRHZYZkhVVgo5NnFKUjRkSmtHVHNqZUNaNFcrcjgvRk5TLzloOE1HaHNiNlZsNXlReVVvdWcvT2RlaE1DMkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUp4Z1Y3WlZEakI5RldZc3lLNlB2cW93RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBMgpNRE14T0RJM01UaGFGdzB5TWpBMk1ETXhPREkzTVRoYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEZW1SMDR3UEd4TDFmdDhvVnBoRWxsT254ZEUwcWJ6amJaTG1rWkZudjJwWExTOEh4cTBhYis1NHFseG43ZQoxd2FwU3czbjZCcUJPRmR2Y1JaZkpGeVRINUpXdGJxZXJvV2owSUovMGdKRm4rclpTL1drRnBpRWdxUzdaTVhtClE1Nm5FV2pqazRaSkJ4QXRYbm02UGZhMzRkeGZYZTlVdVJTUFRIK3k3SGJCb3hnS3dtWFJlVmg0djhYRjBzaUwKTWplWGVtdmlGT2h3OG4reXB3TUtQbHpKbTI1cXdSKzEvb2R6VWVoUldVcFQzcnFESzg1a3pZQ1dRYXREYTU5KwpFS0hTbUFZOFhPeHRaMzFmQjNIRVFPNXRJN1RsOE9nN0RsOEhPRlBtMmNrY1VFWVJuMU12czRJSHZ2YUNuOGpSCmNkN1RacEE4ODV1a1M1L3JSdTFqNHJpVkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUF1eGVNNHl1bTBheFZGZWw4SUtvRVNrbkFMUjB5eUpRZWcxSS9VSGNlK0c2ZkF5THAyM1RpTWtkR2oKNklIZ1VjSDlqYlJ6YVRLU0diT29ESTBYa1F5aVcyZXlnbEw4SDZkMGU4bXlKTjJFUlV5MlczaU1HcW80TGF4bwp1MXNqdmNWSWZNT1pSbkF1dVNrbWhFTksrbU5ORmhqZ0xpWHZ6KzZQY0djS0p1OXhGK2d6amJIMnVBRU4vN2dDCk1XbmJJMHY5T05QSk94TUpXaWhuV0xhTnBlYzhQZ1k2TkJhWnJMZ3JJMTBYbmdrUmRtOEM0SFZRQ0E2TjlVREQKZDM4NkhjVG4zT3kvN2tpaHpvRzRlUW5UZTROY00xV3ZrWTY2bzI1QUM3Mk14emZCWkVwSGhIUy9YRzdkSVVCZwpjbGw2OHNUVVBVL3BKeEg0SG9ZeDBCZ0VUZGJ4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 20f2fd0c4c6cbf901e33e1fe53f1d8ba628a8b4aea25a413266a4bcf6b984204
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
