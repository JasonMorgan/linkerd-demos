---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRY0NBczFrSG9WUnZJNlFydG9RMUpkREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TVRFeE1URTFORGswT0ZvWApEVEl5TVRFeE1URTFORGswT0Zvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTXRXUXpaQzVXUG1HM01oOUZ4OUg1Q3UKRHNUZFQxdElNTTBuZ0JOMUdjL0srSzhneGhYUkpMMUhmcHJRdHNPVjNzZFgzMU1qVjQ2R0FGK1BpRk9ycEpBWgpzL2ZuMTJndlBmVlpMYTlRbFo3bTc1eEo5U1JuNjlNQmdBa0FEdmJoNjc4YW5yV2FVdHoyMklNaHRSOFAzZGVGCk9nS01PUDlGdjI0YnZZdXk5SGxqVnJRN253dzRCUml2MnovRDlkWlUvVU5WRTJ1cW1TeTg4QlN4SXd1SlZrTjIKOSs4UVpNRXJ5L0xUejZCdG55UTdVMytCSGd5NmMxbU83UmpVbXE2b2t3dmFPekNnbS9JOXY1V0FjMHd3OWNRbwpxRmpXcGVPNWdnRXpDRndhTklpRnpzZ0dXK1ZWYitkbXRrdjV4RlcyRmZqdDNXRlRiU2VpTFg0OEF0b3ZFbThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCZU1ucUxvNzF5VUgzY1AwTFliOHlVTDVpSG5UOWFHCnNPMTZoTHpYSDNHUVlzU0RPTzhXdEozL1NUQXFuSXdhdllXanBWUkU2MXoyRlF0MkI0ejA4ZS9xSnBNNk1PNy8KWDNRMWc5dy9lc2VuNC9UdXdwTm5OMWZHZUFTeCtiV0NUVmtzMWQ0aUordDJBaXRMN3RFLzdPTlpqZmhlRE4yNApMRmRvM0MyYnVRUFNuK2NrMmxscGtzTlFncFdVTkt1RTg1UGVyTkFqL0M5K3ZvZmh5M1g3S1VlbWlzVXRDd2xkCmNJNi95OGtsS3VCR0c4MXRaTExrSEQxT1ZCU3VUV29PWWpyeU45aVFsRE9MbWdYWGVxRGNsN2NNWE1RQk1BaUkKRkFHWGZBYUl5bGEvVGlHYkkrU0ZoUGN6ZndoUDArb1hUMVMxaHVzREFCRzRZU0k0eUhIdWE3RT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeTFaRE5rTGxZK1liY3lIMFhIMGZrSzRPeE4xUFcwZ3d6U2VBRTNVWno4cjRyeURHCkZkRWt2VWQrbXRDMnc1WGV4MWZmVXlOWGpvWUFYNCtJVTZ1a2tCbXo5K2ZYYUM4OTlWa3RyMUNWbnVidm5FbjEKSkdmcjB3R0FDUUFPOXVIcnZ4cWV0WnBTM1BiWWd5RzFIdy9kMTRVNkFvdzQvMFcvYmh1OWk3TDBlV05XdER1ZgpERGdGR0svYlA4UDExbFQ5UTFVVGE2cVpMTHp3RkxFakM0bFdRM2IzN3hCa3dTdkw4dFBQb0cyZkpEdFRmNEVlCkRMcHpXWTd0R05TYXJxaVRDOW83TUtDYjhqMi9sWUJ6VEREMXhDaW9XTmFsNDdtQ0FUTUlYQm8waUlYT3lBWmIKNVZWdjUyYTJTL25FVmJZVitPM2RZVk50SjZJdGZqd0MyaThTYndJREFRQUJBb0lCQUNYY2d4bFliWFFqaFpyegppSmVzS0xOODVYMGNwRWtmOFE1U081UGo2eEY0L3NORk8vMFYrMXhQTXJETENpenkvQTlzT2tZMXYzam5WS3gyCmduRHA5Zk5yQmNxMFhiU2xqMGplK1JXNjBKRk0rUExHQnFKbncwNS82Z0pEQTRaTzNPR3hxRG15YVptQlVTRmgKcG1NSlJrcDZJU29XU0Fxb1J4UE9rSVd4cGJud1ExM2F4WW4wcnIyUmxxWlFHVmptWEExMHlLY2ticUVZL2hMZgplWE5aWExRYUhYaFVCRGdTUkU4UzlaUlY5Um9NdHN1K09aaVBZemwwQjluWHFITU9LQlg2bks4YmtUcnl4bC9VClc5T1FZODlDU2QreUZLb3FJdXRYTFFEaUhKYTVCMjdxMld1QzdpN3NqMnJwdUtCYm1uRGpqTFNYaWVHUis4TFAKcDJHSDd5a0NnWUVBNG5RSFlvZlIwbnVpQW1QaE1qQm9sYWViSE1XYUw5eS9SSEVmY0FyQ0tXN25kdVFmR2VoOQpVM3VDREgyd3JjU0tZN2RhUFBnQVBHOVhScDhPU3BISC9teFdudHJDT2YwSDl5R2hNQi9xRU9QcndmaWQ2bnRwCndmTkFsZUFGb1k1TVp4dytXdnpEeGhJM20vN0JoQ2t3YzB2TlArUUdiam84TEhmajQxRFRGczBDZ1lFQTVkNGIKSGUrekJ2TzY2aXNRVU1xSmVLcnJFbHplVnpKclVqdExkT082RC84R1ZjRkJpMS9RZ3Jlbmw2UWtrVFZjU3JhOQpSRUFuTTdyQ1A1NzYwTjBSc0NvNjNVL0NPUFNFaDRMN2NaUXpHb0VUM1ArellxODVETDNlemQyVjlaUmh3NlJECjJtMHFta3B3RzVlbCtrV21QWHlsZXU5YS85NThVWENCNklHWE5pc0NnWUVBbG1oc2swUVUyQkduM0tDTWJiSjcKZEpNYlVuUG80a3RqZXNrTUVYWUQybE5BUjlaaTFlbDJmR0YzVW1hVldBVkh5YzE1a1M5RHNPQmUvcGdjZk9qeApCZ3JkU2F1US84VVJhbEthNWdUOGlYVnBISy9ONjNWSEhEdytOSTNVRDZjZEZndExXMUd4a3JoODJRN1BaOEdYCjNheUdTaDVoS3d0ZzlrUTNSNzlpUlMwQ2dZRUFnS1pSR08wWmptK0VraUJ0N2ptY3ZPc3p5MEFzdERLa3ZBNHgKaWdjV0VIUFQwTlRyWVJ6TDd3em9nRWMrckFKb1YreDBleWxJaDN3ajBVV2g3Smw5bDlIYXhoZ29oSVhkVXBadApNY0VXNU9PUEFXWWV1TUdHdFduaXMrY3JVWm10S2JqYXZQblNHUzVHRmp0R2lvN0ducTBQVklGM3RiS0ljMi83ClZPeUtlNmNDZ1lFQTI0RkNaREpQY01Halh2RUR3aHVOakR1UDYxSWRFditJM01Nek5YWjJpZm05SEJiSnEvL0cKNUNMMVlkVjJsWXdLL3NVbEVGditKUkJ2a05MdUQyOEd5TEFFbHdFQjdzdTJCbmV1c3FqMlNqbW4yRzBKSkNweAphQkV0WVFIanFEeUxXcVhCeUNKQzlNY043Q3B5c2p1YzAzelNIN29sN3J3ayt3NmcyS2pKNWpVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRY0NBczFrSG9WUnZJNlFydG9RMUpkREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TVRFeE1URTFORGswT0ZvWApEVEl5TVRFeE1URTFORGswT0Zvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTXRXUXpaQzVXUG1HM01oOUZ4OUg1Q3UKRHNUZFQxdElNTTBuZ0JOMUdjL0srSzhneGhYUkpMMUhmcHJRdHNPVjNzZFgzMU1qVjQ2R0FGK1BpRk9ycEpBWgpzL2ZuMTJndlBmVlpMYTlRbFo3bTc1eEo5U1JuNjlNQmdBa0FEdmJoNjc4YW5yV2FVdHoyMklNaHRSOFAzZGVGCk9nS01PUDlGdjI0YnZZdXk5SGxqVnJRN253dzRCUml2MnovRDlkWlUvVU5WRTJ1cW1TeTg4QlN4SXd1SlZrTjIKOSs4UVpNRXJ5L0xUejZCdG55UTdVMytCSGd5NmMxbU83UmpVbXE2b2t3dmFPekNnbS9JOXY1V0FjMHd3OWNRbwpxRmpXcGVPNWdnRXpDRndhTklpRnpzZ0dXK1ZWYitkbXRrdjV4RlcyRmZqdDNXRlRiU2VpTFg0OEF0b3ZFbThDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCZU1ucUxvNzF5VUgzY1AwTFliOHlVTDVpSG5UOWFHCnNPMTZoTHpYSDNHUVlzU0RPTzhXdEozL1NUQXFuSXdhdllXanBWUkU2MXoyRlF0MkI0ejA4ZS9xSnBNNk1PNy8KWDNRMWc5dy9lc2VuNC9UdXdwTm5OMWZHZUFTeCtiV0NUVmtzMWQ0aUordDJBaXRMN3RFLzdPTlpqZmhlRE4yNApMRmRvM0MyYnVRUFNuK2NrMmxscGtzTlFncFdVTkt1RTg1UGVyTkFqL0M5K3ZvZmh5M1g3S1VlbWlzVXRDd2xkCmNJNi95OGtsS3VCR0c4MXRaTExrSEQxT1ZCU3VUV29PWWpyeU45aVFsRE9MbWdYWGVxRGNsN2NNWE1RQk1BaUkKRkFHWGZBYUl5bGEvVGlHYkkrU0ZoUGN6ZndoUDArb1hUMVMxaHVzREFCRzRZU0k0eUhIdWE3RT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: admin
  client:
    # for kubelet probes and prometheus scraping
    unauthenticated: true

---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 951a7b61ff59229914ca604c671353e5fdc0eda710bde2bfbb50c9225225babe
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: metrics-api
  client:
    meshTLS:
      serviceAccounts:
      - name: web
      - name: prometheus
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
    [log]
    mode = console
    [log.console]
    format = text
    level = info
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: grafana
  labels:
    linkerd.io/extension: viz
    component: grafana
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: grafana
  client:
    # web, prometheus and the kubelet probes
    unauthenticated: true
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 8bd88dc0862722b00ad702b3a33ff6f80b24e367ecdb9b1077a4bca1c7daf6d8
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: tap-api
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU56cFdZc1kzY2lPTmxRYTZTb1JNN013RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRFeApNVEV4TlRRNU5EaGFGdzB5TWpFeE1URXhOVFE1TkRoYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFESUptd2M3RGlPeXVRQy81NXBoV0xoNWY1Y2xBSGdWUzJTQlo2OGZUQVVNNW83dWsxNVZXS09qM0xJUGl3aQpTVm9sT2g4N1NEbG1zZUdyZGV0UEs3Y0NKVy92ZUU2U1o1L3JXTDJ3L0dYNXhNNnJTMzJ2VERpWkN2RXZvQUFJCnFWeld5Y09wbzR2YzBJWGQzbVF2TzI3NEFTZDJiaU0yd3hzWXordDl2Z3NlNFgxZWovM1l6ak9NNmU0bjRRaUQKR3FEcHp4NkJSWm5VcFRvN0ZaSDhTemN0dnJaMXRDOUNaUTRzY1ZicWplekJMOWxEbnowWWZpWnZMQ1BsN3B0MgpHc2hXM3VudjBFZlR0c3ROMllUQWdxYnRwZWtHNjRYV0xKZmhBVnhHenNQcVJCdG9kZGM3dVhTYUtCWlZPTVlZCjlHbVhKRkFNQURxaVZwY0xacDhkcDFOdkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURFRFhtVWpmS3F4VVBnOTlIOEJ5eU42NnQyclc0Ty9MYXEwYzRmRDQ1cys1ZDBVQklPVVpOUkl6RGgKRnk0SGR3MUNENXhQbm00NkxwUnZQZjhnWkxxNENUa2hGOW1ybTdLOGlyTUZaeFJtL2JHMm50NU9TYzNWWEdNMApYQVlHeU4xbTI1N0QxZkVqR0ZLb0RFNHlNOHRWYk5Sd0FlallSS3R2RDhZVkxIQ3J6WE5Fc0RKcENWQU9BZzRVCmUyQUhocTZrMUdGSkc4ekVjcUY1M3FhK3UyTlZpWkhLR3pIWmU2bG4zTkt5ZjNqbkViNEpRY1RrZ2JTOGsvOGwKcyt0K3F0WUhoUGV4WThURWJHbzBMRWN6VFFBcE9rOWZKUGI4aEFDZ3JWRVp6eCs1ODIzTUkvSzQ3VEtPa0Z1VwpzYnh4RkNNVGNZam5iaHc1ZSswV0RrTWVmRTJhCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeUNac0hPdzRqc3JrQXYrZWFZVmk0ZVgrWEpRQjRGVXRrZ1dldkgwd0ZET2FPN3BOCmVWVmlqbzl5eUQ0c0lrbGFKVG9mTzBnNVpySGhxM1hyVHl1M0FpVnY3M2hPa21lZjYxaTlzUHhsK2NUT3EwdDkKcjB3NG1RcnhMNkFBQ0tsYzFzbkRxYU9MM05DRjNkNWtMenR1K0FFbmRtNGpOc01iR00vcmZiNExIdUY5WG8vOQoyTTR6ak9udUorRUlneHFnNmM4ZWdVV1oxS1U2T3hXUi9FczNMYjYyZGJRdlFtVU9MSEZXNm8zc3dTL1pRNTg5CkdING1ieXdqNWU2YmRocklWdDdwNzlCSDA3YkxUZG1Fd0lLbTdhWHBCdXVGMWl5WDRRRmNSczdENmtRYmFIWFgKTzdsMG1pZ1dWVGpHR1BScGx5UlFEQUE2b2xhWEMyYWZIYWRUYndJREFRQUJBb0lCQVFDUThXSXh2ODlsZVFDTwpPMWNZeTRQRVc2NU1sTktYQnBndHV1d3RTK3RaZGRVbms4OHZJdXB3bXVsZ29jV01QdHFOUXY0RERGYWxUQVJGCkN1d1JOWE1lbHNYdEFZN0U3MDRjUFBPQ0RBWTlUb3pyOTR0Wk96VnhmejhTWWlna0hhSWgyWk5jY2hlREhXOFUKTVUwVDkxSnhQMFM0dXlHOU1xV1kzbG1IZ2V6RHV2ZGJsOENUVjVNTlpCNkF4QU9lN1U3RnIydmg2OWt3UGZjRApVNWZmcjYyMnZPQ1NYcmQzNUxKS0ZGenRpbUxvVEtqd2FBTmliWnVKREFsbURLeGtsNlR3WFhZYlMyQnI3QjJmCjViVnZBZHB6TS9FcndUNDhBaklMaWszRysySXlQYVJjV3dyTGZlY0ltVHlWNE9KWEYwK0hNeVNIU0E3eENJTTgKeEovZ3lWdUJBb0dCQVBJZEZkUTFVWU96TElCMURjcGs4T0tsYVRYRlNKUFdqWlErK09VNWdQQXJDcDQ2OVhHWQo0RTRTUUJpMlpzTDg3MDViQ2ZvT3NvUjE5K3ptbjJGc2VzcWJnQnVya3hOcy9VMkpPYyt4VS9Cb2haUEVEMzYrClQ5TnFIczJGV2VRei9ka1pxVkloZUs4QjBsaGMwbjlxemcxUjFLNUJsczdNTWhENmFUVXVYOFovQW9HQkFOT2gKTVlQZjVqUFpBc1pJK3lKOERwenFnQmdRb2ZvckdzZnF3RFJETVJSc1dQWUpGTENqUXJkRFFrV1lFMCtOcXNGQQp2TnJtSlh5R1VGQzBhR1NPcENXbHlBVFVEcCtkMDdLbW93QlFFTWR6bC9obVFMWmtXT0lxVDBXMnVocm9jSTQrCnFjbDhLVk9kNW15OXYzTGp4MjdtSCtnK3VhYVBodlBHRkJ1OFJGc1JBb0dCQU9lS1h6emhmTUk1a042TWt4S3kKOUJlY1h3Q1lXaTlnS1dmVHpVM1NiM2UvZ2RrT3czbk8zUHhzd2JXZ2dxZ0pJb2JKMDhHN1dvZ0pGWUFPa2UrbQp3Y3VQYUxXTm9Rc2IyU2JVakdBTzB4cC9xdmRFc2hqZ3doQ0tWVWp4TmFWaS8yb20rMkhiTnNJUE9PMWVYOFNSCkROdDZIYTVFZFlmeGloUG9sc0xRUmJIYkFvR0JBTU5FZW1HSjEraURGZEpMU0oxN0JpaTNIdFlWa3I4M3dwQXcKQklTMGNyYTdlaUlhSXVNUTRPQWp5U1JadTRldDJaNVMwMjdPNkV2THlwT013cjMxOTNOZFVmOVNndU80UnJzUwprbGdaaUVIZ1lKcXNEbzI4YlY3UlZ5K2wrSFlYZnJOaEVseDhtYzB6Wm9kelZSRDNKdThtbXM0NkFpYXpTL3ZtCkNtdkUvUFZoQW9HQU9GYS9kMHpoNE5URUVoQ1BIQ3cvSkFVRGwxQWhMRXo4eHJ3a3VmZUFncU41QlY0dmNZdmsKb1ZHZHlIYWRvMnlxbzA3WTFPL2V0NGYvK0xqblN0S3BvemxCODViTmFKQStCQ3haZGZJcFBXaGU5ejdhQXlCMgpveGYralJUYjFuM0xaMm5IcUVGTng3L3pQUzEzOFZ0N1oxUjZyOFdwYzNhQi83MUZ6NFBBKytJPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU56cFdZc1kzY2lPTmxRYTZTb1JNN013RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRFeApNVEV4TlRRNU5EaGFGdzB5TWpFeE1URXhOVFE1TkRoYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFESUptd2M3RGlPeXVRQy81NXBoV0xoNWY1Y2xBSGdWUzJTQlo2OGZUQVVNNW83dWsxNVZXS09qM0xJUGl3aQpTVm9sT2g4N1NEbG1zZUdyZGV0UEs3Y0NKVy92ZUU2U1o1L3JXTDJ3L0dYNXhNNnJTMzJ2VERpWkN2RXZvQUFJCnFWeld5Y09wbzR2YzBJWGQzbVF2TzI3NEFTZDJiaU0yd3hzWXordDl2Z3NlNFgxZWovM1l6ak9NNmU0bjRRaUQKR3FEcHp4NkJSWm5VcFRvN0ZaSDhTemN0dnJaMXRDOUNaUTRzY1ZicWplekJMOWxEbnowWWZpWnZMQ1BsN3B0MgpHc2hXM3VudjBFZlR0c3ROMllUQWdxYnRwZWtHNjRYV0xKZmhBVnhHenNQcVJCdG9kZGM3dVhTYUtCWlZPTVlZCjlHbVhKRkFNQURxaVZwY0xacDhkcDFOdkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURFRFhtVWpmS3F4VVBnOTlIOEJ5eU42NnQyclc0Ty9MYXEwYzRmRDQ1cys1ZDBVQklPVVpOUkl6RGgKRnk0SGR3MUNENXhQbm00NkxwUnZQZjhnWkxxNENUa2hGOW1ybTdLOGlyTUZaeFJtL2JHMm50NU9TYzNWWEdNMApYQVlHeU4xbTI1N0QxZkVqR0ZLb0RFNHlNOHRWYk5Sd0FlallSS3R2RDhZVkxIQ3J6WE5Fc0RKcENWQU9BZzRVCmUyQUhocTZrMUdGSkc4ekVjcUY1M3FhK3UyTlZpWkhLR3pIWmU2bG4zTkt5ZjNqbkViNEpRY1RrZ2JTOGsvOGwKcyt0K3F0WUhoUGV4WThURWJHbzBMRWN6VFFBcE9rOWZKUGI4aEFDZ3JWRVp6eCs1ODIzTUkvSzQ3VEtPa0Z1VwpzYnh4RkNNVGNZam5iaHc1ZSswV0RrTWVmRTJhCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 4ef0e9e068893bc96d20df8fa223e6ee80d8396d8a5cedf31e0c7949aa08932a
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        image: cr.l5d.io/linkerd/tap:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  server:
    name: tap-injector-webhook
  client:
    # traffic coming from kube-api
    unauthenticated: true
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.11.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.1
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.11.1
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: grafana.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
spec:
  routes:
  - name: GET /api/annotations
    condition:
      method: GET
      pathRegex: /api/annotations
  - name: GET /api/dashboards/tags
    condition:
      method: GET
      pathRegex: /api/dashboards/tags
  - name: GET /api/dashboards/uid/{uid}
    condition:
      method: GET
      pathRegex: /api/dashboards/uid/.*
  - name: GET /api/dashboard/{dashboard}
    condition:
      method: GET
      pathRegex: /api/dashboard/.*
  - name: GET /api/datasources/proxy/1/api/v1/series
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/series
  - name: GET /api/datasources/proxy/1/api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/datasources/proxy/1/api/v1/query_range
  - name: GET /api/search
    condition:
      method: GET
      pathRegex: /api/search
  - name: GET /d/{uid}/{dashboard-name}
    condition:
      method: GET
      pathRegex: /d/[^/]*/.*
  - name: GET /public/build/{style}.css
    condition:
      method: GET
      pathRegex: /public/build/.*\.css
  - name: GET /public/fonts/{font}
    condition:
      method: GET
      pathRegex: /public/fonts/.*
  - name: GET /public/img/{img}
    condition:
      method: GET
      pathRegex: /public/img/.*
