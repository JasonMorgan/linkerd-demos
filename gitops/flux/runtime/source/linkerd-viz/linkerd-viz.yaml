---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQVFrZ0U5YjlCWUZFZzY0aVBKYlBQakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURNeE1URTNNRE15TUZvWApEVEl5TURNeE1URTNNRE15TUZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJ3bzJwb040MFZObVpPbG5qbHpsVHgKSCtadDJuU2hoMmpUR3k0VHB6NWErQ2ZNUjdZNk5sOW9rR2FxRDloY2tQa0p4YmM5cnJSTnhQNWVvVzlkVEc5SwpXOGNqaWYrN0ZNMWZNUGhPNndVN1I3SXdORHAvRkp3VTRuM29NMWFpWnFHUkQyZjJ2VEdCUG1vbHh4R1dYdk1oCkREdU54ak5DSDh2K3Q4QUs1dXhsK2tsNUFwdUJsRjZnbmUwdERYVlRQaEdVOEVuNjlhOVYrd0o0RUV4am1RaXkKbXhFQ09PM05JS0lSNnA4OFNITkJlelkzNHk4bm5sbVBVaVFZazE5M1hVZ3pmM2FtalFhd0ZTT2ZnN1pHSi9uOQpvUFJISHBNVFhKRjVxVXpmeGdiQndWZUl6VWJPekVSUmZ4RUZDekhMRXdPU0Fwd2Z0TE5qeDdUdkoyc1RlUHNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHa1pqRjFDUGJlQXhHa2pSMzZvMUhXc08xa29JaTNtCnNrakRjc3E2ZFBaRWxSYlhyUzkxTTdseVRnQkZNeHd5Vng5M0JWQ1JaOGxaSW4vR25sb3FJdzNYUEdqaHRaUEQKcmdZeUIwTVBnb3RaQmg0Wi9HV2Z3MDM2cUtLMlJKb1Jwc01zVElUeklxNEVENlBQL082cVY1ZFZ5NmsvbS94Ugp1T09uYnhNblBLZ29Hc1lvN1hsY0RRcGgyZGR2ekh2S2VLc0tWM1RwUE1zbHl4d1RqcWlzZnZLYjN0YUhiUHVJCnFNbGo4clpQTG0xZ0xMTWRubGVJV3hLYURIOEI4bStmK1VUcEFiVVl4VlpBZUZURUZzc3czNmlMTnBIalk2YUIKTXJFeVB5SWhKWHViNTlSMkE4c3Vuc0wvL3VtWnRNZWJyTmVwT3NUNGNZYzZzbkRGOGIrRFJvYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdXZDamFtZzNqUlUyWms2V2VPWE9WUEVmNW0zYWRLR0hhTk1iTGhPblBscjRKOHhICnRqbzJYMmlRWnFvUDJGeVErUW5GdHoydXRFM0UvbDZoYjExTWIwcGJ4eU9KLzdzVXpWOHcrRTdyQlR0SHNqQTAKT244VW5CVGlmZWd6VnFKbW9aRVBaL2E5TVlFK2FpWEhFWlplOHlFTU80M0dNMElmeS82M3dBcm03R1g2U1hrQwptNEdVWHFDZDdTME5kVk0rRVpUd1NmcjFyMVg3QW5nUVRHT1pDTEtiRVFJNDdjMGdvaEhxbnp4SWMwRjdOamZqCkx5ZWVXWTlTSkJpVFgzZGRTRE4vZHFhTkJyQVZJNStEdGtZbitmMmc5RWNla3hOY2tYbXBUTi9HQnNIQlY0ak4KUnM3TVJGRi9FUVVMTWNzVEE1SUNuQiswczJQSHRPOG5heE40K3dJREFRQUJBb0lCQUNsbWRhcHhIaXhla0VlawpDK3NHYWVXaDZRQ3RQMzRvNzhZbFNwV3Z3SkFzc1Z5Ty95cTZSYVJua2VOS3NtdW1SRzBDM3dpdjNtc0w5aDZuCmNuVXBZbTRiTjZ3b2tMMVQvMDFrVVlJTWFEd21Yc0Ixc0h0ci9YSjdwWlZnd1Uza2RYbytsL3pjUmhZYW0yb0MKcDgyYlViZmlqOFQ0cHZaZkpJK1cvN2JHTTFJUytxZ3pPVUxWd0hSbEhwbU8rWldPd0lXemlLOXpqMkNwQ2RpTwp1aWNCQmhsRWY2bVZZRzlqbTM3YWpaTzJ6OC9SanRoV0JrbDJzcUF3SWs4U01pRWo5bzdRd1M3Q3JYMzFiYWI4Cm42YW1jaHpMUDkxRHVHTnlEWWI3bTl1bXVKNTg2OXZLd3B0SThlZnVrWmplRXE4QlEzK1d0bTdGd2xUKzZlZ0IKK1krTG4zRUNnWUVBNEN4SEpCWXlMWkZITnZjN3RGT0JrWWVsK3RqTVZGWFRRZDkwOWx3bmxXdThSOWZybTZ6VwpNWFYwQzBUQ1Q5azRwcjJSaEg0U0lsOXlWU0sweFBSU3haUXpETER1MjVPOWIrN0NpUWxMblRIVlpvZ08wVEMvCnp0a1h4M0dGZk9GeU91MWVjY24rR3BSdEc2Z09TKy96N09KSWdlcGhLNTFCdXZITXZKMlcyMFVDZ1lFQTFYc2EKTlZXcldCYmZYUzFlaXh2MURmL0tYdFNORmVZTFJNMStCdExMRTBWS1JDaVlrbUFLMElMVXdUa0hGYWlDUmtaQwpqL0pLMnhEMWVGaG9WZll6VHVFUHl5WGlGejdDQ3A1Vm5PT01wSjRWY3hwSHkzRGpRSVI0ak5HYk1IZGZFMmJFCm5SQzhrTXRMSHdUdEZ0MU56enJBdkhZZnZNbkY3WFMzcEx3Y0p6OENnWUJUVGVENTlnMmJoVnN6ZjloK0FISXIKeEg3WG91ejdnaEZKYjJLbGtrVmJiM2UrTXV6cEl1ZE41ZG5Edmo5L01MZXVyczkrcnVMS1J6SFRsVndidkxkdAptTThIcmxCMDVJZ0hLbkM4UCtvTGRsTlpFTUtBMWw3UTNUZks4OUtwUDVZVmM5UWU4UE11cVcyS1UzOU1sTlRPCmVLQjlOcjM1V1N6dDdhRXBqbDViQ1FLQmdGWkF3YXNRN1FUUFlQbjFyY0JJMEc4U2pVSlpZSk9iZWF3WDFyYU4KRG8yL3Jpenh0Z3RXRUtpRVk4K1o2Zm5mTnB1TUliS2xNNGRsUjdpVEI3ekxsNWxrSjR4dHh2YWJYYTBLb2c2YwpoYU94VjN0RkFBTDdubVhmNEJFTlUwVjJ4WXhDTm1nN2JlU1dyc2hlcGloWnkrbFJsTFBRaWl3dDNmRjkrZ0R1CkcvWGpBb0dCQUpmZEdXbmVmTGpNMlYwR0RwWk4wSkhLQnBMMVJjenNvd01SNzdFTHIvTXVxOEFDVFpCa2czZWcKc2lIcnUza25aSXBlT09NUEMxZkdNMUFPaEN2VnJuK0lpWk93VEJ2aGtyZFozTzRBNXVjZ1hIUzkxRXhGNXVjQQpuRDdBaFA3c0k1MXB4Z0UxNjRHVHZvVVg5aTZoSVQxcStzTzdSdUowaU1TTzFWaE4wbUF6Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRQVFrZ0U5YjlCWUZFZzY0aVBKYlBQakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURNeE1URTNNRE15TUZvWApEVEl5TURNeE1URTNNRE15TUZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHJ3bzJwb040MFZObVpPbG5qbHpsVHgKSCtadDJuU2hoMmpUR3k0VHB6NWErQ2ZNUjdZNk5sOW9rR2FxRDloY2tQa0p4YmM5cnJSTnhQNWVvVzlkVEc5SwpXOGNqaWYrN0ZNMWZNUGhPNndVN1I3SXdORHAvRkp3VTRuM29NMWFpWnFHUkQyZjJ2VEdCUG1vbHh4R1dYdk1oCkREdU54ak5DSDh2K3Q4QUs1dXhsK2tsNUFwdUJsRjZnbmUwdERYVlRQaEdVOEVuNjlhOVYrd0o0RUV4am1RaXkKbXhFQ09PM05JS0lSNnA4OFNITkJlelkzNHk4bm5sbVBVaVFZazE5M1hVZ3pmM2FtalFhd0ZTT2ZnN1pHSi9uOQpvUFJISHBNVFhKRjVxVXpmeGdiQndWZUl6VWJPekVSUmZ4RUZDekhMRXdPU0Fwd2Z0TE5qeDdUdkoyc1RlUHNDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHa1pqRjFDUGJlQXhHa2pSMzZvMUhXc08xa29JaTNtCnNrakRjc3E2ZFBaRWxSYlhyUzkxTTdseVRnQkZNeHd5Vng5M0JWQ1JaOGxaSW4vR25sb3FJdzNYUEdqaHRaUEQKcmdZeUIwTVBnb3RaQmg0Wi9HV2Z3MDM2cUtLMlJKb1Jwc01zVElUeklxNEVENlBQL082cVY1ZFZ5NmsvbS94Ugp1T09uYnhNblBLZ29Hc1lvN1hsY0RRcGgyZGR2ekh2S2VLc0tWM1RwUE1zbHl4d1RqcWlzZnZLYjN0YUhiUHVJCnFNbGo4clpQTG0xZ0xMTWRubGVJV3hLYURIOEI4bStmK1VUcEFiVVl4VlpBZUZURUZzc3czNmlMTnBIalk2YUIKTXJFeVB5SWhKWHViNTlSMkE4c3Vuc0wvL3VtWnRNZWJyTmVwT3NUNGNZYzZzbkRGOGIrRFJvYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 6964959c4cc11bd93b7563d8b7cd28720d4abd5ca125194f130eedc9ef04e167
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRS2UwNXdzQk00dTEyNUtoZm5La0V2REFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURNeApNVEUzTURNeU1Gb1hEVEl5TURNeE1URTNNRE15TUZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1yR0V5QVlldGJzQytFQVl4THBiR3JzWGhJdmlJeHBmcTd6OGNMM3FMWVZJeU13d1hLcVVoYWdqN3Y4Q0NrZQp1TmhFb3RrZWxKUS9hOXpMRCtsbTdnSXBWeHNiYWQ5M0hGRHRqRDdGbXUrV2p1WmlWRStheHFycXRwZXEwajdQCmZQTEJubDlLaklEWGhNa040c1JOT3hBeE00Rlg1WlRLK1RCYkxlZXc5aTlUNXBNNTdiUG4zZHI5MjFUSkhvcUwKTElYUG9tU3pSSGJiYk84R084NkI5WitCZkZzU3hKWHYwMTB6cGRJcldSM2NYVm5GRml1SEVHa3JvUks3NkQrUgpQbE4vaEhWbnJQUitmOUY3aUpFNXBCQzBaVkhobnJvNEVob1gwakw0dVF1ZE1RNmhXc0NOT2dIcUtTL2FEYm02CmZXbmk0b2FwZCtmVUM1bUljdmFvbkhVQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTEsyT3NRMEY2aXUrQ2cybkl4VmFCb3BkRGthUm13aTFvcTlSV1FnSmoyWkgyeDFCTWxCQjExa01icWIKVnhiZGw0QmNoa0srd3dpOGxxV2JOU0V6ZHRuUXZTdzlLOFFYbnAyUjFwQzZGQ1lSWU1Lb1UxNjNsbldZR0NBTgpUUjEwNkE0WUJiaHIzNHdNRVRlTzJwQlB3VFpRajIzU2JRSGV6S1o1QVdnZjNwVXlHYUxJQk1pbGJKSHhOeExHCmt6V1BqdjFMR3hLMjRReEdmc3Q0VXBPSlFsUnJDS1U1MnJsbGNIUkZhZC9oZXg3UzMwQzc1TTIwTWJkVVZ2WnYKQWpQZkFmeTFxVkhCQlBHQ3diS3BkV2RJNzBmRVN5dU5odnROYjliOVg2UWs3dzV3NFNmVDBuSHdUM2YwR1BjRAoxOUZtdU9rNUlHa0ZZT1EwcGRoQjNKMW9Jakk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeXNZVElCaDYxdXdMNFFCakV1bHNhdXhlRWkrSWpHbCtydlB4d3Zlb3RoVWpJekRCCmNxcFNGcUNQdS93SUtSNjQyRVNpMlI2VWxEOXIzTXNQNldidUFpbFhHeHRwMzNjY1VPMk1Qc1dhNzVhTzVtSlUKVDVyR3F1cTJsNnJTUHM5ODhzR2VYMHFNZ05lRXlRM2l4RTA3RURFemdWZmxsTXI1TUZzdDU3RDJMMVBta3pudApzK2ZkMnYzYlZNa2Vpb3NzaGMraVpMTkVkdHRzN3dZN3pvSDFuNEY4V3hMRWxlL1RYVE9sMGl0WkhkeGRXY1VXCks0Y1FhU3VoRXJ2b1A1RStVMytFZFdlczlINS8wWHVJa1Rta0VMUmxVZUdldWpnU0doZlNNdmk1QzUweERxRmEKd0kwNkFlb3BMOW9OdWJwOWFlTGlocWwzNTlRTG1ZaHk5cWljZFFJREFRQUJBb0lCQUJvQzlMc2VTTXUvTmZyawpDTkdKUGc0dFNoZjlId0FjSEZNbkdmRlB3Y1d4eW5NZU13S1psTFF3WHAvWHdkZzhoNnUraWtGZDZlTm1pMWlrCmQrTVNBQ0FvMjNLdnZwSWEvbmZuTVNGd1NlTElKb2FwUUhXQnZsQjRrWG05UVFFcnJyU1pYODZMaXFDUWhRa2gKamVCdW84Lzg3OFY4MkFlUlRnd0U5a3VOYU5kREttbFJ5QkUwY05NTmozeEF6WUZzS3BtT2EwMmg3Q1hlLzlJZwpwbnlmTG9qdzRyamVQSmtnZ0c2RnFiQnhEWWpMZUtDc1BmN3ZjWmloNkYwaHB0QkdJdmVTVWd5MCtvcDhTWVpHCnJZMFZ2Smgrb05ZWms5L3owUEpZaFZ3N2tLODFXS1BUYnVXd2w5TWIvRGRpS1BUVTYvbnlaQTg1ZWp2N0llejQKdWpla2NmVUNnWUVBMDdxa0plY05VS1ZQd2VjZmZzaHZwR1NsMFBaZXYzV1pBT1ZPdFVvMGtSU1lNSWs2WjRhVgp0aWNvOGpSbDdEZ21XUVRyNStralQzTUt2U2ZTbkF3ZTBHV3hpZU1rNElTZ0NxUHRxdjlLdGgyOHlrVUw0amdBCnRTdG1vY3lod2MzNCttR1FuM2Z1RFArelpQYkV4bS9zVzJVbWd5T1ZSNndndkFrYXprTEwvNDhDZ1lFQTlTd1QKU1hYUFVIbkpiWUk5RXdINUQ0MkJ1OTdITkRtbVh2aC9jbUZxY0NRQlZRWDZiSHpLQ01jakZoZE82VnE3dXBNKwovT1NtRHplOEVWbGJIOTNwZytTUnVta2UreHFjcHpqUWxxaEdoQWk3azdoQ3FPSFhXc3ZBTmRQWDFnNXBTNzRsCllycWRYUkd3VVBTV2VJN1hSaU1kVStzMVJrUUFtUW53Qnl0VW9ic0NnWUFESHU4b2Q5MWtZT3RxQ2tRV2xGSEEKOUpMVkg2eUoyZXZsYlh2WmhEeCtIdldYVVk2QTFDVUV5Rkw4THZXSm85STg0YXV3Z1drNTFKSkY4MzVST29TQgp3ZDM2RUZVTTBpZWh3SVRTVG0wRmZpNjROSWhXVDBrRFlwNWlxQ2VDT2N6L3M4eHo3VXFlK20za2dSYXBiaURuCnYvZnZXdWpxWTRrZi9HcGV1L0ZSMVFLQmdENG1GeG1IRUsrQXY4dlB1UFdwaVY0azY5OFk0UHhmSk1wc1NicFAKOFhCTjREeVNVR0hSM0ZFUFVkaVd2ZjB2YitraXpGUEZEa2RMUkpSTlIya3prcTlKY0p1RmJFSVJBK2JyNHd4ZAp5Y3BNZ0dnNHpFVU5RczhVV1R3TDRHbTFxNEYweVB0Vy9POEx2ZHMzdFRFSVhJKzk5UUJCM25aYVpLQm13WDYvCndDdGpBb0dBVTZsWERveEpBWGRDYlBka05kOEJMaWZoVGQySmNBRUhEVXY3cEpRZGd0VmxnK1pHWDdXSUNKMTMKeiswSlNXNHJ4cXFqZm4zTDQxa21YeEE4bkppcC9IMlR1REFjclY0Y3BZMTFGUHhWMmIxQlArV1BwRFhIQ1BhWgpmbUFMZGtHOFF5RG9SVWxhbjh4TElqSE5uelBWVHhxeHAzOUVJeXdRMDZCZW0wTlVPRXM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRS2UwNXdzQk00dTEyNUtoZm5La0V2REFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURNeApNVEUzTURNeU1Gb1hEVEl5TURNeE1URTNNRE15TUZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1yR0V5QVlldGJzQytFQVl4THBiR3JzWGhJdmlJeHBmcTd6OGNMM3FMWVZJeU13d1hLcVVoYWdqN3Y4Q0NrZQp1TmhFb3RrZWxKUS9hOXpMRCtsbTdnSXBWeHNiYWQ5M0hGRHRqRDdGbXUrV2p1WmlWRStheHFycXRwZXEwajdQCmZQTEJubDlLaklEWGhNa040c1JOT3hBeE00Rlg1WlRLK1RCYkxlZXc5aTlUNXBNNTdiUG4zZHI5MjFUSkhvcUwKTElYUG9tU3pSSGJiYk84R084NkI5WitCZkZzU3hKWHYwMTB6cGRJcldSM2NYVm5GRml1SEVHa3JvUks3NkQrUgpQbE4vaEhWbnJQUitmOUY3aUpFNXBCQzBaVkhobnJvNEVob1gwakw0dVF1ZE1RNmhXc0NOT2dIcUtTL2FEYm02CmZXbmk0b2FwZCtmVUM1bUljdmFvbkhVQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTEsyT3NRMEY2aXUrQ2cybkl4VmFCb3BkRGthUm13aTFvcTlSV1FnSmoyWkgyeDFCTWxCQjExa01icWIKVnhiZGw0QmNoa0srd3dpOGxxV2JOU0V6ZHRuUXZTdzlLOFFYbnAyUjFwQzZGQ1lSWU1Lb1UxNjNsbldZR0NBTgpUUjEwNkE0WUJiaHIzNHdNRVRlTzJwQlB3VFpRajIzU2JRSGV6S1o1QVdnZjNwVXlHYUxJQk1pbGJKSHhOeExHCmt6V1BqdjFMR3hLMjRReEdmc3Q0VXBPSlFsUnJDS1U1MnJsbGNIUkZhZC9oZXg3UzMwQzc1TTIwTWJkVVZ2WnYKQWpQZkFmeTFxVkhCQlBHQ3diS3BkV2RJNzBmRVN5dU5odnROYjliOVg2UWs3dzV3NFNmVDBuSHdUM2YwR1BjRAoxOUZtdU9rNUlHa0ZZT1EwcGRoQjNKMW9Jakk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: f01dbbccced8ef40e60c9ffd17b981bb8983dbc3c1d516d1afb57d11af39a77c
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
